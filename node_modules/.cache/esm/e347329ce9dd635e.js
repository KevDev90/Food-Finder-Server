let Restaurant,Review,validateReviewData,validateRestaurantData,validateRestaurantUpdateData,createConnection,sequelize;_e9d‍.w("./models/Restaurant",[["default",["Restaurant"],function(v){Restaurant=v}]]);_e9d‍.w("./models/Review",[["default",["Review"],function(v){Review=v}]]);_e9d‍.w("./validators/review.validator",[["validateReviewData",["validateReviewData"],function(v){validateReviewData=v}]]);_e9d‍.w("./validators/restaurant.validator",[["validateRestaurantData",["validateRestaurantData"],function(v){validateRestaurantData=v}],["validateRestaurantUpdateData",["validateRestaurantUpdateData"],function(v){validateRestaurantUpdateData=v}]]);_e9d‍.w("./utils/dbconnection.util",[["createConnection",["createConnection"],function(v){createConnection=v}],["sequelize",["sequelize"],function(v){sequelize=v}]]);require("dotenv").config();
const express = require("express");





const cors = require("cors");
const morgan = require("morgan");
const app = express();
createConnection(sequelize);
const { NODE_ENV, PORT, IP } = process.env;
const morganOption = (NODE_ENV === 'production')
  ? 'tiny'
  : 'common';

app.use(morgan(morganOption))
app.use(cors());
app.options("*", cors());
app.use(express.json());

Restaurant.hasMany(Review, { as: "reviews", foreignKey: "restaurant_id" })
Review.belongsTo(Restaurant, {
  as: "restaurant",
  foreignKey: "restaurant_id"
})

app.get("/", (req, res) => {
  return res.status(200).json({ message: "food app server" })
})

// Get all Restaurants

app.get("/api/v1/restaurants", async (req, res) => {
  console.log('getrequest')
  try {
    const restaurants = await Restaurant.findAll()

    res.status(200).json({
      status: "success",
      results: restaurants.length,
      data: restaurants
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: err.message });
  }
});

//Get a Restaurant

app.get("/api/v1/restaurants/:id", async (req, res) => {
  try {
    let { id } = req.params;
    let restaurant = await Restaurant.findByPk(id,
      {
        include: "reviews"
      }
    )
    if (!restaurant) return res.status(404).json({ message: "restaurant does not exist" })
    return res.status(200).json({
      status: "success",
      data: restaurant
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: "Server error " + err.message })
  }
});

// Create a Restaurant

app.post("/api/v1/restaurants", async (req, res) => {
  _e9d‍.g.console.log('postreq', req.body);

  try {
    let { err, value } = await validateRestaurantData(req.body)
    if (err) return res.status(400).json({ message: err.details[0].message, data: err.details })
    const restaurant = await Restaurant.create(value)

    res.status(201).json({
      status: "success",
      data: {
        restaurant,
      },
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: "Server error " + err.message })
  }
});

// Update Restaurants

app.put("/api/v1/restaurants/:id", async (req, res) => {
  try {
    const { err, value } = await validateRestaurantUpdateData(req.body)
    if (err) return res.status(400).json({ message: err.details[0].message, data: err.details })
    let { id } = req.params;
    const restaurant = await Restaurant.findByPk(id);
    if (!restaurant) return res.status(400).json({
      message: "Restaurant not found"
    })
    const updatedRestaurant = await restaurant.update(value)

    res.status(200).json({
      status: "success",
      data: {
        retaurant: updatedRestaurant
      },
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: "Server error " + err.message })
  }

});

// Delete Restaurant

app.delete("/api/v1/restaurants/:id", async (req, res) => {
  try {
    let restaurant = await Restaurant.findByPk(req.params.id);
    if (!restaurant) return res.status(404).json({ message: "restaurant does not exist" })
    let destroyedReviews = await Review.destroy({
      where: {
        restaurant_id: restaurant.id
      }
    })
    const deletedRestaurant = await Restaurant.destroy({ where: { id: req.params.id } })
    if (!deletedRestaurant) return res.status(400).json({ message: "cannot delete restaurant" })
    res.status(200).json({
      message: "restaurant",
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: "Server error " + err.message })
  }
});

// Add Review

app.post("/api/v1/restaurants/:id/addReview", async (req, res) => {
  try {
    const { err, value } = await validateReviewData(req.body)
    if (err) return res.status(400).json({ message: err.details[0].message, data: err.details })
    const review = await Review.create(value)
    res.status(201).json({
      status: "success",
      data: {
        review,
      },
    });
  } catch (err) {
    _e9d‍.g.console.log(err);
    return res.status(500).json({ message: "Server error " + err.message })
  }
});

if (NODE_ENV === "production") {
  app.listen(PORT, IP, () => {
    console.log(`server is up and listening on ${IP}:${PORT}`);
  });
} else {
  app.listen(3001, () => {
    console.log(`server is up and listening on port 3001`);
  });
}
