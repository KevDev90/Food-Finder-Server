let Sequelize,configs,dotenv;_2b9‍.x([["sequelize",()=>sequelize],["createConnection",()=>createConnection]]);_2b9‍.w("sequelize",[["Sequelize",["Sequelize"],function(v){Sequelize=v}]]);_2b9‍.w("../config/config",[["default",["configs"],function(v){configs=v}]]);_2b9‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);


dotenv.config();

const env = process.env.NODE_ENV || 'development'
const config = configs[env];
       let sequelize;

if (config.use_env_variable) {
    sequelize = new Sequelize(process.env[config.use_env_variable]);
} else {
    sequelize = new Sequelize(config.database, config.username, config.password, config);
}

// export let sequelize = new Sequelize(process.env.DATABASE_URL, {
//     dialect: "postgres",
//     protocol: "postgres",
//     dialectOptions: {
//         ssl: {
//             rejectUnauthorized: false
//         }
//     },
// });

       const createConnection = async (sequelize) => {
    try {
        await sequelize.authenticate();
        console.log("Connection has been established successfully.");
    } catch (error) {
        _2b9‍.g.console.error("Unable to connect to the database:", error);
    } finally {
        await sequelize.sync();
    }
};